import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Badge } from "./ui/badge";
import { Textarea } from "./ui/textarea";
import { 
  Search, 
  Loader2, 
  FileText, 
  Download, 
  Clock, 
  TrendingUp,
  Lightbulb,
  BarChart3,
  ExternalLink
} from "lucide-react";
import { toast } from "sonner";
import { API_ENDPOINTS, apiFetch } from "../config/api";

interface ResearchReport {
  query: string;
  generatedAt: string;
  summary: string;
  keyFindings: string[];
  trending: string[];
  statistics: {
    articlesAnalyzed: number;
    sourcesUsed: string[];
    timeRange: string;
  };
  articles: {
    title: string;
    source: string;
    url: string;
    relevance: number;
    summary: string;
  }[];
}

interface ResearchModeProps {
  // No props needed - using API config directly
}

export function ResearchMode({}: ResearchModeProps) {
  const [query, setQuery] = useState("");
  const [isResearching, setIsResearching] = useState(false);
  const [report, setReport] = useState<ResearchReport | null>(null);

  const suggestedQueries = [
    "Summarize the biggest AI funding rounds in the past 2 weeks",
    "What's new with OpenAI this month?",
    "Latest breakthroughs in quantum computing",
    "Recent developments in AI agents and autonomous systems",
    "Military tech innovations in the past month"
  ];

  const conductResearch = async () => {
    if (!query.trim()) {
      toast.error("Please enter a research query");
      return;
    }

    setIsResearching(true);
    try {
      // Use optimized semantic search endpoint from FastAPI backend
      // Backend now returns full article objects in a single request
      const data = await apiFetch<any>(API_ENDPOINTS.semanticSearch, {
        method: "POST",
        body: JSON.stringify({ query, limit: 20 }),
      });

      // Backend returns { results: [{ article: {...}, score: number }], query, total }
      const results = data.results || [];

      // Transform to research report format
      const report: ResearchReport = {
        query: query,
        generatedAt: new Date().toISOString(),
        summary: `Research query: "${query}". Found ${results.length} relevant articles using semantic search.`,
        keyFindings: results.slice(0, 5).map((r: any) => r.article?.title || "Finding") as string[],
        trending: [...new Set(results.flatMap((r: any) => r.article?.categories || []))] as string[],
        statistics: {
          articlesAnalyzed: results.length,
          sourcesUsed: [...new Set(results.map((r: any) => r.article?.source).filter(Boolean))] as string[],
          timeRange: "Last 30 days"
        },
        articles: results.slice(0, 10).map((r: any) => ({
          title: r.article?.title || "Unknown",
          source: r.article?.source || "Unknown",
          url: r.article?.url || "#",
          relevance: Math.round(r.score * 100),
          summary: r.article?.summary || r.article?.content?.substring(0, 200) + "..." || ""
        }))
      };

      setReport(report);
      toast.success("Research complete!");
    } catch (error) {
      console.error("Error conducting research:", error);
      toast.error("Failed to conduct research. Please try again.");
    } finally {
      setIsResearching(false);
    }
  };

  const exportToMarkdown = () => {
    if (!report) return;

    const markdown = `# ${report.query}

**Generated:** ${new Date(report.generatedAt).toLocaleString()}

## Summary

${report.summary}

## Key Findings

${report.keyFindings.map((finding, idx) => `${idx + 1}. ${finding}`).join('\n')}

## Trending Topics

${report.trending.map(topic => `- ${topic}`).join('\n')}

## Statistics

- **Articles Analyzed:** ${report.statistics.articlesAnalyzed}
- **Sources Used:** ${report.statistics.sourcesUsed.join(', ')}
- **Time Range:** ${report.statistics.timeRange}

## Relevant Articles

${report.articles.map(article => `### ${article.title}
**Source:** ${article.source} | **Relevance:** ${(article.relevance * 100).toFixed(0)}%

${article.summary}

[Read More](${article.url})
`).join('\n---\n\n')}

---

*Generated by TechPulse AI Research Mode*
`;

    const blob = new Blob([markdown], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `techpulse-research-${Date.now()}.md`;
    a.click();
    URL.revokeObjectURL(url);
    toast.success("Report exported to Markdown!");
  };

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Research Input */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Lightbulb className="w-5 h-5 text-blue-600" />
            Agentic Research Mode
          </CardTitle>
          <CardDescription>
            Ask a research question and our AI agent will search, analyze, and generate a comprehensive report
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Input
              placeholder="e.g., Summarize the biggest AI funding rounds in the past 2 weeks"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && conductResearch()}
              className="flex-1"
            />
            <Button onClick={conductResearch} disabled={isResearching}>
              {isResearching ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Researching...
                </>
              ) : (
                <>
                  <Search className="w-4 h-4 mr-2" />
                  Research
                </>
              )}
            </Button>
          </div>

          {/* Suggested Queries */}
          <div>
            <p className="text-sm text-gray-600 mb-2">Suggested queries:</p>
            <div className="flex flex-wrap gap-2">
              {suggestedQueries.map((suggested, idx) => (
                <Badge
                  key={idx}
                  variant="outline"
                  className="cursor-pointer hover:bg-gray-100"
                  onClick={() => setQuery(suggested)}
                >
                  {suggested}
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Research Report */}
      {report && (
        <div className="space-y-4">
          {/* Report Header */}
          <Card>
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <CardTitle className="text-2xl mb-2">{report.query}</CardTitle>
                  <CardDescription className="flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    Generated {new Date(report.generatedAt).toLocaleString()}
                  </CardDescription>
                </div>
                <Button onClick={exportToMarkdown} variant="outline">
                  <Download className="w-4 h-4 mr-2" />
                  Export Markdown
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Summary */}
              <div>
                <h3 className="font-semibold mb-2">Executive Summary</h3>
                <p className="text-gray-700">{report.summary}</p>
              </div>

              {/* Statistics */}
              <div className="grid grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg">
                <div>
                  <div className="text-2xl font-bold text-blue-600">
                    {report.statistics.articlesAnalyzed}
                  </div>
                  <div className="text-sm text-gray-600">Articles Analyzed</div>
                </div>
                <div>
                  <div className="text-2xl font-bold text-blue-600">
                    {report.statistics.sourcesUsed.length}
                  </div>
                  <div className="text-sm text-gray-600">Sources Used</div>
                </div>
                <div>
                  <div className="text-sm font-semibold text-blue-600">
                    {report.statistics.timeRange}
                  </div>
                  <div className="text-sm text-gray-600">Time Range</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Key Findings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Key Findings
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-3">
                {report.keyFindings.map((finding, idx) => (
                  <li key={idx} className="flex items-start gap-3">
                    <span className="flex items-center justify-center w-6 h-6 bg-blue-100 text-blue-600 rounded-full flex-shrink-0 text-sm font-semibold">
                      {idx + 1}
                    </span>
                    <span className="text-gray-700 pt-0.5">{finding}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          {/* Trending Topics */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="w-5 h-5" />
                Trending Topics
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2">
                {report.trending.map((topic, idx) => (
                  <Badge key={idx} variant="secondary" className="text-sm">
                    {topic}
                  </Badge>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Relevant Articles */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="w-5 h-5" />
                Relevant Articles ({report.articles.length})
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {report.articles.map((article, idx) => (
                <div key={idx} className="border-b last:border-0 pb-4 last:pb-0">
                  <div className="flex items-start justify-between gap-4 mb-2">
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900 mb-1">
                        {article.title}
                      </h4>
                      <div className="flex items-center gap-2 text-sm text-gray-500 mb-2">
                        <span>{article.source}</span>
                        <span>•</span>
                        <span className="flex items-center gap-1">
                          Relevance: {article.relevance.toFixed(0)}%
                        </span>
                      </div>
                      <p className="text-sm text-gray-700">{article.summary}</p>
                    </div>
                    <Button variant="ghost" size="sm" asChild className="flex-shrink-0">
                      <a href={article.url} target="_blank" rel="noopener noreferrer">
                        <ExternalLink className="w-4 h-4" />
                      </a>
                    </Button>
                  </div>
                  <div className="w-full bg-gray-200 h-1.5 rounded-full overflow-hidden">
                    <div
                      className="bg-blue-600 h-full rounded-full"
                      style={{ width: `${article.relevance}%` }}
                    />
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
      )}

      {/* Empty State */}
      {!report && !isResearching && (
        <Card className="border-dashed">
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Search className="w-12 h-12 text-gray-400 mb-4" />
            <p className="text-gray-600 text-center">
              Enter a research query above to get started
            </p>
            <p className="text-sm text-gray-500 text-center mt-2">
              Our AI agent will search, filter, and generate a comprehensive report
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
