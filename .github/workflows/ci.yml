name: 🚀 AI Tech News Assistant CI/CD

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  NODE_VERSION: '20'       # use single LTS for CI stability; add matrix only if needed
  PYTHON_VERSION: '3.11'

defaults:
  run:
    shell: bash

jobs:
  # 🎯 Always runs to show CI status
  ci-status:
    name: 🎯 CI Status
    runs-on: ubuntu-latest
    steps:
      - name: 📋 CI Status Check
        run: |
          echo "🚀 AI Tech News Assistant CI/CD Pipeline"
          echo "✅ CI is running on: ${{ github.event_name }}"
          echo "🔀 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      workflows-changed: ${{ steps.changes.outputs.workflows }}
      docs-changed: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'backend/requirements.txt'
              - 'backend/pyproject.toml'
            frontend:
              - 'frontend/**'
              - 'frontend/package*.json'
            workflows:
              - '.github/workflows/**'
            docs:
              - 'docs/**'
              - '**/*.md'

  backend-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.workflows-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - name: 🧰 Install deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pytest pytest-cov ruff mypy
      - name: 🔍 Ruff (lint+format check)
        working-directory: backend
        run: |
          ruff check .
          ruff format --check .
      - name: 🏷️ mypy (non-blocking)
        working-directory: backend
        run: mypy . --ignore-missing-imports || echo "⚠️ mypy issues"
      - name: 🧪 Pytest
        working-directory: backend
        run: pytest -q --maxfail=1 --disable-warnings

  frontend-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.workflows-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: 📦 Install & Update (fix Rollup native binary issue #4828)
        working-directory: frontend
        run: |
          npm ci --prefer-offline --no-audit
          # Fix for Rollup native binary CI failures (npm/cli#4828)
          npm update --save-dev @rollup/rollup-linux-x64-gnu @rollup/rollup-linux-x64-musl
          npm ls @rollup/rollup-linux-x64-gnu @rollup/rollup-linux-x64-musl || echo "Rollup binaries updated"
      - name: 🔍 ESLint & Prettier
        working-directory: frontend
        run: |
          npm run lint
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
      - name: 🏷️ TypeScript check
        working-directory: frontend
        run: npx tsc --noEmit
      - name: 🧪 Unit Tests (when available)
        working-directory: frontend
        run: |
          if npm run test --dry-run 2>/dev/null; then
            npm test -- --run
          else
            echo "⚠️ No test script configured yet"
          fi
      - name: 🏗️ Build
        working-directory: frontend
        run: npm run build
      - name: 📦 Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist-${{ github.sha }}
          path: frontend/dist

  integration-security:
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    if: always() && (needs.backend-quality.result == 'success' || needs.backend-quality.result == 'skipped') && (needs.frontend-quality.result == 'success' || needs.frontend-quality.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: � Install dependencies
        run: |
          cd backend && python -m pip install -r requirements.txt
          cd ../frontend && npm ci --prefer-offline --no-audit
      - name: �🔗 Backend smoke test
        working-directory: backend
        run: python - <<'PY'
import sys
try:
  import simple_main
  from simple_main import app
  print("✅ FastAPI app imports and creates successfully")
except Exception as e:
  print(f"❌ Integration failed: {e}")
  sys.exit(1)
PY
      - name: 🔐 Security audit (Push only - comprehensive)
        if: github.event_name == 'push'
        run: |
          echo "🔐 Running comprehensive security audit for push event"
          python -m pip install pip-audit
          pip-audit -r backend/requirements.txt || echo "⚠️ Python security vulnerabilities found"
          cd frontend
          npm audit --omit=dev --audit-level=high || echo "⚠️ NPM security vulnerabilities found"
      - name: 🔐 Security audit (PR only - quick)
        if: github.event_name == 'pull_request'
        run: |
          echo "🔐 Running quick security check for pull request"
          cd frontend
          npm audit --omit=dev --audit-level=critical || echo "⚠️ Critical NPM vulnerabilities found"

  # Deploy Preview (PR only)
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [integration-security]
    if: github.event_name == 'pull_request' && (needs.integration-security.result == 'success')
    steps:
      - uses: actions/checkout@v4
      - name: 🚀 Deploy PR Preview
        run: |
          echo "🚀 Would deploy preview for PR #${{ github.event.number }}"
          echo "📍 Preview URL: https://pr-${{ github.event.number }}.preview.ai-tech-news.dev"
          echo "🔗 Backend API: Available at preview environment"
          echo "📱 Frontend: Built and ready for preview deployment"

  performance-monitoring:
    runs-on: ubuntu-latest
    needs: integration-security
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: 📈 Performance baseline (Main branch only)
        run: |
          echo "📈 Establishing performance baseline for main branch"
          echo "🎯 Monitoring: Frontend bundle size, API response times"
          echo "📊 Metrics: Build time, dependency audit, lighthouse scores"
