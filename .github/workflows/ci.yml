name: CI

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Testing Job
  backend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black isort flake8
        
    - name: Check Python code formatting with Black
      run: |
        cd backend
        black --check --diff . || echo "⚠ Black formatting check failed"
        
    - name: Check Python import sorting with isort
      run: |
        cd backend
        isort --check-only --diff . || echo "⚠ isort check failed"
        
    - name: Check Python code style with flake8
      run: |
        cd backend
        flake8 . --max-line-length=88 --extend-ignore=E203,W503 || echo "⚠ flake8 check failed"
        
    - name: Test backend imports
      run: |
        cd backend
        python -c "
        try:
            import simple_main
            print('✓ Backend main module imports successfully')
        except Exception as e:
            print(f'⚠ Backend import issue: {e}')
            exit(1)
        "
        
    - name: Test FastAPI app creation
      run: |
        cd backend
        python -c "
        try:
            from simple_main import app
            print('✓ FastAPI app creates successfully') 
        except Exception as e:
            print(f'⚠ FastAPI app creation issue: {e}')
            exit(1)
        "
        
    - name: Run backend tests
      run: |
        cd backend
        if [ -f "../tests/test_ci_friendly.py" ]; then
            echo "Running CI-friendly tests..."
            python ../tests/test_ci_friendly.py
        else
            echo "Running basic backend validation..."
            python -c "import simple_main; print('✓ Backend validation passed')"
        fi

  # Frontend Testing Job  
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Install testing and formatting tools
      run: |
        cd frontend
        npm install --save-dev prettier @testing-library/react @testing-library/jest-dom vitest jsdom
        
    - name: Check frontend formatting with Prettier
      run: |
        cd frontend
        npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}" || echo "⚠ Prettier check would fail - formatting needed"
        
    - name: Run TypeScript type checking
      run: |
        cd frontend
        npx tsc --noEmit
        
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint || echo "⚠ ESLint issues found"
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Integration Build Job
  integration-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install all dependencies
      run: |
        # Backend dependencies
        cd backend
        pip install -r requirements.txt
        cd ../frontend
        npm ci
        
    - name: Test backend startup
      run: |
        cd backend
        python -c "
        try:
            import simple_main
            from simple_main import app
            print('✓ Backend startup test passed')
        except Exception as e:
            print(f'⚠ Backend startup issue: {e}')
            exit(1)
        "
        
    - name: Build frontend for production
      run: |
        cd frontend
        npm run build
        
    - name: Verify build artifacts
      run: |
        echo "✓ Checking build artifacts..."
        if [ -d "frontend/dist" ]; then
          echo "✓ Frontend build artifacts found"
          ls -la frontend/dist/
        else
          echo "⚠ Frontend build artifacts missing"
          exit 1
        fi
        echo "✓ Integration build completed successfully"
